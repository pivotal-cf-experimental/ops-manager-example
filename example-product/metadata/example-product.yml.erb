<% product_name = "example-product #{suffix}".parameterize -%>
---
name: <%= product_name %>
product_version: <%= version.inspect %>
minimum_version_for_upgrade: "0"
metadata_version: "2.4"
label: 'Ops Manager: Example Product<%= suffix ? " #{suffix}" : nil%>'
description: An example product to demonstrate Ops Manager product-author features
rank: 1
service_broker: false # Default value
opsmanager_syslog: true
stemcell_criteria:
  os: <%= stemcell_os.inspect %>
  version: <%= stemcell_version.inspect %>

  # allows you to opt-out of the default behaviour of Ops Manager 1.8+ to always
  # use the latest patch update of an available stemcell version. Set to 'false'
  # to use the exact version match of the stemcell.
  #
  # default: true
  enable_patch_security_updates: true
releases:
  - name: example-release
    file: <%= release_file_name.inspect %>
    version: <%= release_file_name.match(/^example-release-(.*)\.tgz$/)[1].inspect %>
  - name: os-conf
    file: os-conf
    version: '15'

variables:
  - name: credhub-password
    type: password
  - name: generated-secret-migrated-to-credhub
    type: password
  - name: generated-rsa-key-migrated-to-credhub
    type: rsa
  - name: generated-simple-creds-migrated-to-credhub
    type: user
  - name: generated-salted-creds-migrated-to-credhub
    type: user

post_deploy_errands:
  - name: example-errand
    colocated: false
  - name: example_colocated_errand
    colocated: true
    run_default: on
    instances:
      - web_server/first
    label: colocated errand on web_server
    description: This errand does little more than print a message in order to prove colocated errands work.

pre_delete_errands:
  - name: example-errand

form_types:
  - name: example-form
    label: Configurable Properties
    description: All the properties that you can configure!
    markdown: |
      ## I am markdown, hear me _roar_.

      ![Alt text](http://placekitten.com/g/400/200)

      Things to do:

      1. Learn [markdown](https://daringfireball.net/projects/markdown/).
      1. ...
      1. Profit!
    property_inputs:
      - reference: .web_server.example_string
        label: Example string
        description: 'Configure a property of type string'
      - reference: .web_server.example_string_with_placeholder
        label: Example string containing Placeholder text
        description: 'Optional field. Configuration not necessary'
        placeholder: 'Ghost text. Spooky!'
      - reference: .web_server.example_migrated_integer
        label: Example integer
        description: 'Configure a property of type integer'
      - reference: .web_server.example_boolean
        label: Example boolean
        description: 'Configure a property of type boolean'
      - reference: .web_server.example_dropdown
        label: Example dropdown
        description: 'Configure a property of type dropdown'
      - reference: .web_server.example_domain
        label: Example domain
        description: 'Configure a property of type domain'
      - reference: .web_server.example_wildcard_domain
        label: Example wildcard_domain
        description: 'Configure a property of type wildcard_domain'
      - reference: .web_server.example_string_list
        label: Example string_list
        description: 'Configure a property of type string_list'
      - reference: .web_server.example_text
        label: Example text
        description: 'Configure a property of type text (setting to "magic value" will cause the web server job instance count to go to 0)'
      - reference: .web_server.example_ldap_url
        label: Example ldap_url
        description: 'Configure a property of type ldap_url'
      - reference: .web_server.example_email
        label: Example email
        description: 'Configure a property of type email'
      - reference: .web_server.example_http_url
        label: Example http_url
        description: 'Configure a property of type http_url'
      - reference: .web_server.example_ip_address
        label: Example ip_address
        description: 'Configure a property of type ip_address'
      - reference: .web_server.example_ip_ranges
        label: Example ip_ranges
        description: 'Configure a property of type ip_ranges'
      - reference: .web_server.example_multi_select_options
        label: Example multi_select_options
        description: 'Configure a property of type multi_select_options'
      - reference: .web_server.example_network_address_list
        label: Example network_address_list
        description: 'Configure a property of type network_address_list (this property was marked with freeze_on_deploy, and so will not be editable after changes are first applied)'
      - reference: .web_server.example_network_address
        label: Example network_address
        description: 'Configure a property of type network_address'
      - reference: .web_server.example_port
        label: Example port
        description: 'Configure a property of type port'
      - reference: .web_server.example_smtp_authentication
        label: Example smtp_authentication
        description: 'Configure a property of type smtp_authentication'
      - reference: .web_server.client_certificate
        label: Example certificate
        description: 'Configure a certificate'
      - reference: .web_server.example_vm_type_dropdown
        label: Example vm type dropdown
        description: 'The larger the VM the more cookies we can bake'
      - reference: .web_server.example_disk_type_dropdown
        label: Example disk type dropdown
        description: 'The larger the disk the more cookies we store'
  - name: example_collections_form
    label: 'Collection example'
    description: 'A collection example form'
    property_inputs:
      - reference: .properties.example_collection
        label: 'Albums collection'
        description: 'The albums'
        property_inputs:
          - reference: album
            label: 'Name of the Album'
            description: 'ex Graceland'
          - reference: artist
            label: 'Name of the Artist'
            description: 'ex Paul Simon'
          - reference: explicit
            label: 'Explicit?'
            description: '$#!%&'
          - reference: secret_meaning
            label: 'Secret Meaning'
            description: 'If you play it backwards...'
          - reference: secret_meaning_rsa_cert_credentials
            label: 'Secret Meaning RSA Cert'
          - reference: secret_meaning_simple_credentials
            label: 'Secret Meaning Simple Creds'
          - reference: genre
            label: 'Genre'
            description: Are there others?
          - reference: vm_type
            label: 'Music VM Type'
          - reference: disk_type
            label: 'Music Disk Type'
          - reference: example_service_network_az_single_select
            label: 'Country of Origin (Service Network Single AZ Select) Note: Only applicable when service_broker is turned on'
          - reference: example_service_network_az_multi_select
            label: 'CF-Pop Service Network Multi AZ picker? Note: Only applicable when service_broker is turned on'
  - name: example_certificate_collections_form
    label: 'Certificate Collection example'
    description: 'A certificate collection example form'
    property_inputs:
      - reference: .properties.example_cert_collection
        label: 'Certificate collection'
        description: 'Add some certificates here'
        property_inputs:
          - reference: example_cert_from_collection_name
            label: 'Certificate Name'
            description: 'A description, e.g. "My cert for *.example.com"'
          - reference: example_cert_from_collection
            label: 'Certificate'
            description: 'Put your cert here'
  - name: example_selector_form
    label: 'Selector Example'
    description: 'A selector example form'
    property_inputs:
      - reference: .properties.example_selector
        label: 'Food Choices'
        selector_property_inputs:
          - reference: .properties.example_selector.pizza_option
            label: 'Pizza'
            property_inputs:
              - reference: .properties.example_selector.pizza_option.pepperoni
                label: 'Add Pepperoni'
              - reference: .properties.example_selector.pizza_option.pineapple
                label: 'Add Pineapple'
                description: 'Nothing like an apple, would not buy again'
              - reference: .properties.example_selector.pizza_option.other_toppings
                label: 'Other toppings'
              - reference: .properties.example_selector.pizza_option.cheesy_vm_type
                label: 'Cheesy VM Type'
          - reference: .properties.example_selector.filet_mignon_option
            label: 'Filet Mignon'
            property_inputs:
              - reference: .properties.example_selector.filet_mignon_option.rarity_dropdown
                label: 'How rare?'
                description: 'Extinct.'
              - reference: .properties.example_selector.filet_mignon_option.review
                label: 'Write your review'
                description: '"Contained live jaguar, would not buy again."'
              - reference: .properties.example_selector.filet_mignon_option.secret_sauce
                label: 'Secret Sauce'
                description: 'Probably mayonnaise'
          - reference: .properties.example_selector.beverage_option
            label: 'Beverage'
            property_inputs:
              - reference: .properties.example_selector.beverage_option.cola
                label: 'What kind of soda?'
      - reference: .properties.example_selector_with_deployed_director_accessors
        label: 'Utilize director username and password in example product metadata'
        description: 'If selected, director needs to be deployed before example product'
        selector_property_inputs:
        - reference: .properties.example_selector_with_deployed_director_accessors.enable_option
          label: 'Utilize it'
        - reference: .properties.example_selector_with_deployed_director_accessors.disable_option
          label: 'Do not utilize it'
  - name: example_runtime_configs_form
    label: 'Runtime Config Selector Example'
    description: 'A runtime config example form'
    property_inputs:
      - reference: .properties.example_runtime_config_selector
        label: 'Enable Runtime Config'
        selector_property_inputs:
        - reference: .properties.example_runtime_config_selector.enable_option
          label: 'Enabled'
          property_inputs:
            - reference: .properties.example_runtime_config_selector.enable_option.salutation
              label: 'Salutation'
        - reference: .properties.example_runtime_config_selector.disable_option
          label: 'Disabled'
  - name: example_secrets_form
    label: 'Secrets and Credentials Example'
    description: 'A secrets and credentials form'
    property_inputs:
      - reference: .properties.super_secret
        label: 'Super secret top-level product property'
      - reference: .web_server.configured_secret
        label: 'So secret, you do not know the secret exists'
        description: A configurable property of type secret
      - reference: .web_server.configured_simple_credentials
        label: 'Very very simple credentials'
        description: A configurable property of type simple_credentials
      - reference: .web_server.configured_rsa_cert_credentials
        label: 'Credentials with a certificate of achievement. They achieved the highest level of dodgeball at summer camp.'
        description: A configurable property of type rsa_cert_credentials
  - name: static_ips_form
    label: 'Static IPs'
    description: 'Where you go to set static IPs'
    markdown: |
      ![Alt text](https://placebear.com/g/200/300)
    property_inputs:
      - reference: .web_server.static_ips
        label: Web Server IPs
        description: Optional comma-separated list of static IPs that will be assigned to the web server

property_blueprints:
  - name: super_secret
    type: secret
    configurable: true
    optional: true
  - name: example_selector
    type: selector
    configurable: true
    default: Pizza
    freeze_on_deploy: true
    option_templates:
      - name: pizza_option
        select_value: Pizza
        named_manifests:
          - name: my_snippet
            manifest: |
              pizza_toppings:
                pepperoni: (( .properties.example_selector.pizza_option.pepperoni.value ))
                pineapple: (( .properties.example_selector.pizza_option.pineapple.value ))
                other: (( .properties.example_selector.pizza_option.other_toppings.value ))
                cheesy_vm_type: (( .properties.example_selector.pizza_option.cheesy_vm_type.value ))
          - name: provides_section
            manifest: |
              as: 'pizza_link_web_server_job'
          - name: consumes_section
            manifest: |
              from: 'pizza_link_web_server_job'
        property_blueprints:
          - name: pepperoni
            type: boolean
            configurable: true
            freeze_on_deploy: true
          - name: pineapple
            type: boolean
            configurable: true
            default: true
          - name: other_toppings
            type: string
            configurable: true
            optional: true
            constraints:
            - must_match_regex: '\A[^!@#$%^&*()]*\z'
              error_message: 'This name cannot contain special characters.'
          - name: cheesy_vm_type
            type: vm_type_dropdown
            configurable: true
            optional: true
            resource_definitions:
            - name: ram
              configurable: true
              default: 1024
            - name: ephemeral_disk
              configurable: true
              default: 1024
            - name: cpu
              configurable: true
              default: 1
      - name: filet_mignon_option
        select_value: Filet Mignon
        named_manifests:
          - name: my_snippet
            manifest: |
              rarity: (( .properties.example_selector.filet_mignon_option.rarity_dropdown.value ))
              review: (( .properties.example_selector.filet_mignon_option.review.value ))
              secret_sauce: (( .properties.example_selector.filet_mignon_option.secret_sauce.value ))
          - name: provides_section
            manifest: |
              as: 'filet_mignon_link_web_server_job'
          - name: consumes_section
            manifest: |
              from: 'filet_mignon_link_web_server_job'
        property_blueprints:
          - name: rarity_dropdown
            type: dropdown_select
            configurable: true
            default: rare
            options:
              - name: rare
                label: 'Rare'
              - name: medium
                label: 'Medium'
              - name: well-done
                label: 'Well done'
          - name: review
            type: string
            configurable: true
            default: A+++++ power seller of mail order steak
            optional: false
          - name: secret_sauce
            type: secret
            configurable: true
            optional: true
      - name: beverage_option
        select_value: Beverage
        property_blueprints:
          - name: cola
            label: Cola
            type: string
            configurable: true
            optional: true
        named_manifests:
          - name: my_snippet
            manifest: |
              beverage: (( .properties.example_selector.beverage_option.cola.value ))
          - name: provides_section
            manifest: |
              as: 'beverage_link_web_server_job'
          - name: consumes_section
            manifest: |
              from: 'beverage_link_web_server_job'
  - name: example_collection
    type: collection
    configurable: true
    property_blueprints:
      - name: album
        type: string
        default: 'Hello'
        freeze_on_deploy: true
      - name: artist
        type: string
        default: 'World'
        freeze_on_deploy: true
      - name: explicit
        type: boolean
      - name: secret_meaning
        type: secret
        configurable: true
        optional: true
        constraints:
          - must_match_regex: '^[\w\- _]{20,}$'
            error_message: 'This secret must be at least 20 letters'
      - name: secret_meaning_rsa_cert_credentials
        type: rsa_cert_credentials
        configurable: true
        optional: true
      - name: secret_meaning_simple_credentials
        type: simple_credentials
        configurable: true
        optional: true
      - name: vm_type
        type: vm_type_dropdown
        optional: true
        configurable: true
      - name: disk_type
        type: disk_type_dropdown
        configurable: true
        optional: true
      - name: genre
        type: dropdown_select
        configurable: true
        optional: true
        options:
          - name: rock
            label: 'Rock'
          - name: country
            label: 'Country'
          - name: edm
            label: 'Beep Boop PSH'
      - name: example_service_network_az_single_select # Only used if service_broker is turned on
        type: service_network_az_single_select
        configurable: true
        optional: true
      - name: example_service_network_az_multi_select # Only used if service_broker is turned on
        type: service_network_az_multi_select
        configurable: true
        optional: true
    default:
      - album: Christmas Carols
        artist: Ops Manatee
        explicit: true
        genre: edm
  - name: example_cert_collection
    type: collection
    configurable: true
    optional: true
    property_blueprints:
      - name: example_cert_from_collection_name
        type: string
        configurable: true
      - name: example_cert_from_collection
        type: rsa_cert_credentials
        configurable: true
        optional: true
    named_manifests:
    - name: hello_ert_team
      manifest: |
        private_key: (( current_record.example_cert_from_collection.private_key_pem ))
        certificate: (( current_record.example_cert_from_collection.cert_pem ))
  - type: selector
    name: example_runtime_config_selector
    configurable: true
    default: 'Yes'
    option_templates:
    - name: disable_option
      select_value: 'No'
      named_manifests:
      - name: some_named_snippet
        manifest:
    - name: enable_option
      select_value: 'Yes'
      property_blueprints:
        - name: salutation
          type: string
          configurable: true
          optional: true
          default: 'Hello'
      named_manifests:
      - name: some_named_snippet
        manifest: |
          releases:
           - name: os-conf
             version: 15
          addons:
            - name: misc
              jobs:
                - name: login_banner
                  release: os-conf
                  properties:
                    login_banner:
                      text: |
                        (( .properties.example_runtime_config_selector.enable_option.salutation.value )). You are welcome here. Always be kind. 🤗
              include:
                deployments:
                  - (( .deployment_name ))
  - type: selector
    name: example_selector_with_deployed_director_accessors
    configurable: true
    default: 'No'
    option_templates:
    - name: disable_option
      select_value: 'No'
      named_manifests:
      - name: director_deploy_accessors_snippet
        manifest:
    - name: enable_option
      select_value: 'Yes'
      named_manifests:
      - name: director_deploy_accessors_snippet
        manifest: |
          director_username: (( $director.username ))
          director_password: (( $director.password ))

job_types:
  - name: example-errand
    description: The very best illustrative errand that prints all the properties, including secrets.
    templates:
      - name: example-errand
        release: example-release
        manifest: |
          credhub:
            concatenated_password: prefix-((( credhub-password )))-suffix
            password: ((( credhub-password )))
          migrated_to_credhub:
            secret: ((( generated-secret-migrated-to-credhub )))
            rsa_public_key: ((( generated-rsa-key-migrated-to-credhub.public_key )))
            rsa_private_key: ((( generated-rsa-key-migrated-to-credhub.private_key )))
            simple_creds_username: ((( generated-simple-creds-migrated-to-credhub.username )))
            simple_creds_password: ((( generated-simple-creds-migrated-to-credhub.password )))
            salted_creds_username: ((( generated-salted-creds-migrated-to-credhub.username )))
            salted_creds_password: ((( generated-salted-creds-migrated-to-credhub.password )))
          generated:
            root_rsa_certificate: (( $ops_manager.ca_certificate ))
            http_proxy: (( $ops_manager.http_proxy ))
            https_proxy: (( $ops_manager.https_proxy ))
            no_proxy: (( $ops_manager.no_proxy ))
            dns_enabled: (( $ops_manager.dns_enabled ))
            restricted_view_api_access_credentials: (( $ops_manager.restricted_view_api_access_credentials ))
            rsa_cert_credentials:
              present: (( .web_server.generated_rsa_cert_credentials.value_present? ))
              public_key_pem: (( .web_server.generated_rsa_cert_credentials.public_key_pem ))
              cert_and_private_key_pems: (( .web_server.generated_rsa_cert_credentials.cert_and_private_key_pems ))
              cert_pem: (( .web_server.generated_rsa_cert_credentials.cert_pem ))
              private_key_pem: (( .web_server.generated_rsa_cert_credentials.private_key_pem ))
            rsa_pkey_credentials:
              present: (( .web_server.generated_rsa_pkey_credentials.value_present? ))
              public_key_pem: (( .web_server.generated_rsa_pkey_credentials.public_key_pem ))
              private_key_pem: (( .web_server.generated_rsa_pkey_credentials.private_key_pem ))
              public_key_openssh: (( .web_server.generated_rsa_pkey_credentials.public_key_openssh ))
              public_key_fingerprint: (( .web_server.generated_rsa_pkey_credentials.public_key_fingerprint ))
            salted_credentials:
              present: (( .web_server.generated_salted_credentials.value_present? ))
              sha512_hashed_password: (( .web_server.generated_salted_credentials.sha512_hashed_password ))
              identity: (( .web_server.generated_salted_credentials.identity ))
              salt: (( .web_server.generated_salted_credentials.salt ))
              password: (( .web_server.generated_salted_credentials.password ))
            simple_credentials:
              present: (( .web_server.generated_simple_credentials.value_present? ))
              identity: (( .web_server.generated_simple_credentials.identity ))
              password: (( .web_server.generated_simple_credentials.password ))
            secret:
              present: (( .web_server.generated_secret.value_present? ))
              value: (( .web_server.generated_secret.value ))
            uuid: (( .web_server.generated_uuid.value ))
            for_migration_to_credhub:
              rsa_cert_credentials:
                public_key_pem: (( .web_server.generated_rsa_cert_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_pem ))
                cert_and_private_key_pems: (( .web_server.generated_rsa_cert_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.cert_and_private_key_pems ))
              rsa_pkey_credentials:
                public_key_pem: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_pem ))
                private_key_pem: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.private_key_pem ))
                public_key_openssh: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_openssh ))
                public_key_fingerprint: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_fingerprint ))
              salted_credentials:
                sha512_hashed_password: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.sha512_hashed_password ))
                identity: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.identity ))
                salt: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.salt ))
                password: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.password ))
              simple_credentials:
                identity: (( .web_server.generated_simple_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.identity ))
                password: (( .web_server.generated_simple_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.password ))
              secret: (( .web_server.generated_secret_to_migrate_to_credhub_<%= major_and_minor_version %>.value ))
          configured:
            string: (( .web_server.example_string.value ))
            integer: (( .web_server.example_migrated_integer.value ))
            boolean: (( .web_server.example_boolean.value ))
            dropdown: (( .web_server.example_dropdown.value ))
            domain: (( .web_server.example_domain.value ))
            wildcard_domain: (( .web_server.example_wildcard_domain.value ))
            string_list: (( .web_server.example_string_list.value ))
            text: (( .web_server.example_text.value ))
            ldap_url: (( .web_server.example_ldap_url.value ))
            email: (( .web_server.example_email.value ))
            http_url: (( .web_server.example_http_url.value ))
            ip_address: (( .web_server.example_ip_address.value ))
            ip_ranges:
              value: (( .web_server.example_ip_ranges.value ))
              parsed_ip_ranges: (( .web_server.example_ip_ranges.parsed_ip_ranges ))
            multi_select_options: (( .web_server.example_multi_select_options.value ))
            network_address_list:
              value: (( .web_server.example_network_address_list.value ))
              parsed_network_addresses: (( .web_server.example_network_address_list.parsed_network_addresses ))
            network_address: (( .web_server.example_network_address.value ))
            port: (( .web_server.example_port.value ))
            smtp_authentication: (( .web_server.example_smtp_authentication.value ))
            ca_certificate: (( .web_server.client_certificate.value ))
            example_vm_type_dropdown_value: (( .web_server.example_vm_type_dropdown.value ))
            example_disk_type_dropdown_value: (( .web_server.example_disk_type_dropdown.value ))
            record_collection: (( .properties.example_collection.value ))
            selector: (( .properties.example_selector.selected_option.parsed_manifest(my_snippet) ))
            selector_specific_option: (( .properties.example_selector.filet_mignon_option.secret_sauce.value ))
            selector_value: (( .properties.example_selector.value ))
            top_level_secret: (( .properties.super_secret.value ))
            concat_secrets: (( .web_server.configured_simple_credentials.identity )):(( .web_server.configured_simple_credentials.password ))
            secret: (( .web_server.configured_secret.value ))
            secret_ternary: "(( .web_server.configured_secret.value ? '.web_server.configured_secret.value was true' : '.web_server.configured_secret.value was false' ))"
            secret_or: (( .web_server.configured_secret.value || '.web_server.configured_secret.value was false' ))
            rsa_cert_credentials:
              public_key_pem: (( .web_server.configured_rsa_cert_credentials.public_key_pem ))
              cert_and_private_key_pems: (( .web_server.configured_rsa_cert_credentials.cert_and_private_key_pems ))
            simple_credentials:
              identity: (( .web_server.configured_simple_credentials.identity ))
              password: (( .web_server.configured_simple_credentials.password ))
          director_provided_accessors:
            hostname: (( $director.hostname ))
            deployment_ip: (( $director.deployment_ip ))
            username_and_pass: (( .properties.example_selector_with_deployed_director_accessors.selected_option.parsed_manifest(director_deploy_accessors_snippet) ))
            ntp_servers: (( $director.ntp_servers ))
            ca_public_key: (( $director.ca_public_key ))
            tld: (( $director.tld ))
            bosh_metrics_forwarder_client_name: (( $director.bosh_metrics_forwarder_client_name ))
            bosh_metrics_forwarder_client_secret: (( $director.bosh_metrics_forwarder_client_secret ))
          product:
            deployment_name: (( ..<%= product_name %>.deployment_name ))
            network_name: (( ..<%= product_name %>.network_name ))
          self:
            stemcell_version: (( $self.stemcell_version ))
    errand: true
    resource_label: an errand to log properties
    run_post_deploy_errand_default: on
    run_pre_delete_errand_default: on
    static_ip: 0
    dynamic_ip: 1
    max_in_flight: 1
    single_az_only: true
    default_internet_connected: false
    instance_definition:
      name: instances
      configurable: false
      default: 1
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: persistent_disk
        configurable: false
        default: 0
      - name: cpu
        configurable: true
        default: 1
    property_blueprints: []
  - name: web_server
    resource_label: Web Server
    templates:
      - name: web_server
        release: example-release
        provides: |
          web_server_info: (( .properties.example_selector.selected_option.parsed_manifest(provides_section) ))
        consumes: |
          web_server_info: (( .properties.example_selector.selected_option.parsed_manifest(consumes_section) ))
      - name: time_logger
        release: example-release
      - name: example_colocated_errand
        release: example-release
    release: example-release
    static_ip: 1
    dynamic_ip: 0
    max_in_flight: 1
    single_az_only: true
    default_internet_connected: false
    instance_definition:
      name: instances
      configurable: true
      default: 1
      constraints:
        max: 1
      zero_if:
        property_reference: '.properties.example_selector'
        property_values:
          - Filet Mignon
          - Beverage
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 2048
      - name: persistent_disk
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        configurable: true
        default: 1
    property_blueprints:
    - name: property_with_nil_value
      type: string
    - name: property_with_false_value
      type: boolean
      configurable: false
      default: false
    - name: property_with_true_value
      type: boolean
      configurable: false
      default: true
    - name: static_ips
      type: ip_ranges
      configurable: true
      optional: true
    - name: generated_rsa_cert_credentials
      type: rsa_cert_credentials
    - name: generated_rsa_cert_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>
      type: rsa_cert_credentials
    - name: generated_rsa_pkey_credentials
      type: rsa_pkey_credentials
    - name: generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>
      type: rsa_pkey_credentials
    - name: generated_salted_credentials
      type: salted_credentials
    - name: generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>
      type: salted_credentials
    - name: generated_simple_credentials
      type: simple_credentials
    - name: generated_simple_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>
      type: simple_credentials
    - name: generated_secret
      type: secret
    - name: generated_secret_to_migrate_to_credhub_<%= major_and_minor_version %>
      type: secret
    - name: generated_uuid
      type: uuid
    - name: configured_secret
      type: secret
      configurable: true
      optional: true
    - name: configured_simple_credentials
      type: simple_credentials
      configurable: true
      optional: true
    - name: configured_rsa_cert_credentials
      type: rsa_cert_credentials
      configurable: true
      optional: true
    - name: example_string_with_placeholder
      type: string
      configurable: true
      optional: true
      placeholder: 'Configure me!'
    - name: example_string
      type: string
      configurable: true
      default: 'Hello world'
      constraints:
      - must_match_regex: '\A[^!@#$%^&*()]*\z'
        error_message: 'This name cannot contain special characters.'
      - must_match_regex: '\A[^0-9]*\z'
        error_message: 'This name cannot contain digits.'
    - name: example_migrated_integer
      type: integer
      configurable: true
      default: 1
    - name: example_boolean
      type: boolean
      configurable: true
      default: true
    - name: example_dropdown
      type: dropdown_select
      configurable: true
      default: kiwi
      options:
        - name: kiwi
          label: 'label for kiwi'
        - name: lime
          label: 'label for lime'
        - name: avocado
          label: 'label for avocado'
    - name: example_domain
      type: domain
      configurable: true
      default: www.example.com
    - name: example_wildcard_domain
      type: wildcard_domain
      configurable: true
      default: 'example.com'
    - name: example_string_list
      type: string_list
      configurable: true
      default: 'a,list,of,strings'
    - name: example_text
      type: text
      configurable: true
      default: 'some_text'
    - name: example_ldap_url
      type: ldap_url
      configurable: true
      default: 'ldap://example.com'
    - name: example_email
      type: email
      configurable: true
      default: foo@example.com
    - name: example_http_url
      type: http_url
      configurable: true
      default: 'http://www.example.com'
    - name: example_ip_address
      type: ip_address
      configurable: true
      default: '192.168.0.1'
    - name: example_ip_ranges
      type: ip_ranges
      configurable: true
      default: '1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4'
    - name: example_multi_select_options
      type: multi_select_options
      configurable: true
      default: ['earth', 'jupiter']
      options:
        - name: mercury
          label: 'label for mercury'
        - name: venus
          label: 'label for venus'
        - name: earth
          label: 'label for earth'
        - name: mars
          label: 'label for mars'
        - name: jupiter
          label: 'label for jupiter'
        - name: saturn
          label: 'label for saturn'
        - name: uranus
          label: 'label for uranus'
        - name: neptune
          label: 'label for neptune'
    - name: example_network_address_list
      type: network_address_list
      configurable: true
      default: '1.1.1.1,example.com,foo.bar.example.com'
      freeze_on_deploy: true
    - name: example_network_address
      type: network_address
      configurable: true
      default: '1.1.1.1'
    - name: example_port
      type: port
      configurable: true
      default: 1111
    - name: example_smtp_authentication
      type: smtp_authentication
      configurable: true
      default: plain
    - name: client_certificate
      type: ca_certificate
      configurable: true
      optional: true
    - name: example_vm_type_dropdown
      type: vm_type_dropdown
      configurable: true
      optional: true
      resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 1024
      - name: cpu
        configurable: true
        default: 1
    - name: example_disk_type_dropdown
      type: disk_type_dropdown
      configurable: true
      optional: true
      resource_definitions:
      - name: persistent_disk
        default: 2000
    manifest: |
      credhub:
        concatenated_password: prefix-((( credhub-password )))-suffix
        password: ((( credhub-password )))
      migrated_to_credhub:
        secret: ((( generated-secret-migrated-to-credhub )))
        rsa_public_key: ((( generated-rsa-key-migrated-to-credhub.public_key )))
        rsa_private_key: ((( generated-rsa-key-migrated-to-credhub.private_key )))
        simple_creds_username: ((( generated-simple-creds-migrated-to-credhub.username )))
        simple_creds_password: ((( generated-simple-creds-migrated-to-credhub.password )))
        salted_creds_username: ((( generated-salted-creds-migrated-to-credhub.username )))
        salted_creds_password: ((( generated-salted-creds-migrated-to-credhub.password )))
      generated:
        dns_enabled: (( $ops_manager.dns_enabled ))
        root_rsa_certificate: (( $ops_manager.ca_certificate ))
        rsa_cert_credentials:
          present: (( generated_rsa_cert_credentials.value_present? ))
          public_key_pem: (( generated_rsa_cert_credentials.public_key_pem ))
          cert_and_private_key_pems: (( generated_rsa_cert_credentials.cert_and_private_key_pems ))
          cert_pem: (( generated_rsa_cert_credentials.cert_pem ))
          private_key_pem: (( generated_rsa_cert_credentials.private_key_pem ))
        rsa_pkey_credentials:
          present: (( generated_rsa_pkey_credentials.value_present? ))
          public_key_pem: (( generated_rsa_pkey_credentials.public_key_pem ))
          private_key_pem: (( generated_rsa_pkey_credentials.private_key_pem ))
          public_key_openssh: (( generated_rsa_pkey_credentials.public_key_openssh ))
          public_key_fingerprint: (( generated_rsa_pkey_credentials.public_key_fingerprint ))
        salted_credentials:
          present: (( generated_salted_credentials.value_present? ))
          sha512_hashed_password: (( generated_salted_credentials.sha512_hashed_password ))
          identity: (( generated_salted_credentials.identity ))
          salt: (( generated_salted_credentials.salt ))
          password: (( generated_salted_credentials.password ))
        simple_credentials:
          present: (( generated_simple_credentials.value_present? ))
          identity: (( generated_simple_credentials.identity ))
          password: (( generated_simple_credentials.password ))
        secret:
          present: (( .web_server.generated_secret.value_present? ))
          value: (( .web_server.generated_secret.value ))
        uuid: (( generated_uuid.value ))
        # Note that ':' is a special value in yaml, so ternaries need to be quoted...
        ternary_with_property_example: "(( property_with_true_value.value ? 'hello world' : generated_uuid.value ))"
        ternary_with_boolean_example: "(( false ? true : false ))"
        for_migration_to_credhub:
          rsa_cert_credentials:
            public_key_pem: (( .web_server.generated_rsa_cert_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_pem ))
            cert_and_private_key_pems: (( .web_server.generated_rsa_cert_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.cert_and_private_key_pems ))
          rsa_pkey_credentials:
            public_key_pem: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_pem ))
            private_key_pem: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.private_key_pem ))
            public_key_openssh: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_openssh ))
            public_key_fingerprint: (( .web_server.generated_rsa_pkey_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.public_key_fingerprint ))
          salted_credentials:
            sha512_hashed_password: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.sha512_hashed_password ))
            identity: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.identity ))
            salt: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.salt ))
            password: (( .web_server.generated_salted_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.password ))
          simple_credentials:
            identity: (( .web_server.generated_simple_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.identity ))
            password: (( .web_server.generated_simple_credentials_to_migrate_to_credhub_<%= major_and_minor_version %>.password ))
          secret: (( .web_server.generated_secret_to_migrate_to_credhub_<%= major_and_minor_version %>.value ))
      configured:
        concat_example: Hello, (( example_string.value ))! Nice to (( example_text.value )) you.
        string: (( example_string.value ))
        integer: (( example_migrated_integer.value ))
        boolean: (( example_boolean.value ))
        dropdown: (( example_dropdown.value ))
        domain: (( example_domain.value ))
        wildcard_domain: (( example_wildcard_domain.value ))
        string_list: (( example_string_list.value ))
        text: (( example_text.value ))
        ldap_url: (( example_ldap_url.value ))
        email: (( example_email.value ))
        http_url: (( example_http_url.value ))
        ip_address: (( example_ip_address.value ))
        ip_ranges:
          value: (( example_ip_ranges.value ))
          parsed_ip_ranges: (( example_ip_ranges.parsed_ip_ranges ))
        multi_select_options: (( example_multi_select_options.value ))
        network_address_list:
          value: (( example_network_address_list.value ))
          parsed_network_addresses: (( example_network_address_list.parsed_network_addresses ))
        network_address: (( example_network_address.value ))
        port: (( example_port.value ))
        smtp_authentication: (( example_smtp_authentication.value ))
        ca_certificate: (( client_certificate.value ))
        example_vm_type_dropdown_value: (( example_vm_type_dropdown.value ))
        example_disk_type_dropdown_value: (( example_disk_type_dropdown.value ))
        record_collection: (( property_with_nil_value.value || .properties.example_collection.value ))
        certificate_collection_manifest_snippet: (( .properties.example_cert_collection.parsed_manifest(hello_ert_team) ))
        selector: (( .properties.example_selector.selected_option.parsed_manifest(my_snippet) ))
        selector_specific_option: (( .properties.example_selector.filet_mignon_option.secret_sauce.value ))
        selector_value: (( .properties.example_selector.value ))
        top_level_secret: (( .properties.super_secret.value ))
        concat_secrets: (( .web_server.configured_simple_credentials.identity )):(( .web_server.configured_simple_credentials.password ))
        secret: (( .web_server.configured_secret.value ))
        secret_ternary: "(( .web_server.configured_secret.value ? '.web_server.configured_secret.value was true' : '.web_server.configured_secret.value was false' ))"
        secret_or: (( .web_server.configured_secret.value || '.web_server.configured_secret.value was false' ))
        rsa_cert_credentials:
          public_key_pem: "(( property_with_true_value.value ? configured_rsa_cert_credentials.public_key_pem : false ))"
          cert_and_private_key_pems: (( property_with_false_value.value || configured_rsa_cert_credentials.cert_and_private_key_pems ))
        simple_credentials:
          identity: (( property_with_nil_value.value || configured_simple_credentials.identity ))
          password: (( false || configured_simple_credentials.password ))
      ops_manager_provided_accessors:
        name: (( name ))
        ram: (( ram ))
        ephemeral_disk: (( ephemeral_disk ))
        persistent_disk: (( persistent_disk ))
        instances: (( instances ))
        any_instances: (( any_instances ))
      director_provided_accessors:
        hostname: (( $director.hostname ))
        deployment_ip: (( $director.deployment_ip ))
        username_and_pass: (( .properties.example_selector_with_deployed_director_accessors.selected_option.parsed_manifest(director_deploy_accessors_snippet) ))
        ntp_servers: (( $director.ntp_servers ))
        ca_public_key: (( $director.ca_public_key ))
        tld: (( $director.tld ))
        bosh_metrics_forwarder_client_name: (( $director.bosh_metrics_forwarder_client_name ))
        bosh_metrics_forwarder_client_secret: (( $director.bosh_metrics_forwarder_client_secret ))
      product:
        deployment_name: (( .deployment_name ))
        network_name: (( .network_name ))
      self:
        stemcell_version: (( $self.stemcell_version ))
  - name: no_op
    resource_label: No Operation
    templates:
      - name: no_op
        release: example-release
    static_ip: 0
    dynamic_ip: 1
    max_in_flight: 100%
    single_az_only: false
    default_internet_connected: false
    instance_definition:
      name: instances
      configurable: true
      default: 0
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
      - name: ephemeral_disk
        configurable: true
        default: 2048
      - name: persistent_disk
        configurable: true
        default: 8_192
        constraints:
          min: 7000
      - name: cpu
        configurable: true
        default: 1
    property_blueprints: []

runtime_configs:
  - name: kindness_banner_everywhere
    runtime_config: "(( .properties.example_runtime_config_selector.selected_option.parsed_manifest(some_named_snippet) ))"

icon_image: 
